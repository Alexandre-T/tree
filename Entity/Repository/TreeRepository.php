<?php

/**
 * This file is part of the Lex TreeBundle.
 *
 * PHP version 5.6
 *
 * (c) Alexandre Tranchant <alexandre.tranchant@gmail.com>
 *
 * @category  Repository
 *
 * @author    Alexandre Tranchant <alexandre.tranchant@gmail.com>
 * @copyright 2017 Alexandre Tranchant
 * @license   MIT
 *
 * @see https://github.com/Alexandre-T/tree/blob/master/LICENSE
 */

namespace Lex\TreeBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Lex\TreeBundle\Entity\TreeInterface;

/**
 * TreeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TreeRepository extends EntityRepository
{
    /**
     * Find one Tree by Name
     *
     * @param string $name
     * @return TreeInterface
     */
    public function findOneByName($name)
    {
        /** @var TreeInterface $tree */
        $tree = $this->findOneBy(['name' => $name]);
        return $tree;
    }

    /**
     * Find all Children.
     *
     * @param TreeInterface $parent
     *
     * @return array
     */
    public function findAllChildren(TreeInterface $parent)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right')
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find all Children.
     *
     * @param TreeInterface $parent
     *
     * @return array
     */
    public function findChildren(TreeInterface $parent)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right'),
                $query->expr()->eq('t.level', ':level')
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->setParameter('level', $parent->getLevel() + 1)
            ->getQuery()->getResult();
    }

    /**
     * Find complement.
     *
     * @param TreeInterface $element
     *
     * @return array
     */
    public function findComplement(TreeInterface $element)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->orX(
                $query->expr()->lt('t.left', ':left'),
                $query->expr()->gt('t.right', ':right')
            )
        );

        return  $query
            ->setParameter('left', $element->getLeft())
            ->setParameter('right', $element->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find leaves.
     *
     * @param TreeInterface $parent
     *
     * @return array
     */
    public function findLeaves(TreeInterface $parent = null)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        if (null === $parent) {
            $query = $query->where(
                $query->expr()->eq('t.right - t.left', 1)
            );

            return $query->getQuery()->getResult();
        }

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right'),
                $query->expr()->eq('t.right - t.left', 1)
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find nodes.
     *
     * @param TreeInterface $parent
     *
     * @return array
     */
    public function findNodes(TreeInterface $parent = null)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        if (null === $parent) {
            $query = $query->where(
                $query->expr()->gt('t.right - t.left', 1)
            );

            return $query->getQuery()->getResult();
        }

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right'),
                $query->expr()->gt('t.right - t.left', 1)
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find direct Parent.
     *
     * @param TreeInterface $child
     *
     * @return TreeInterface|null
     */
    public function findParent(TreeInterface $child)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->lt('t.left', ':left'),
                $query->expr()->gt('t.right', ':right'),
                $query->expr()->eq('t.level', ':level')
            )
        );

        return $query
            ->setParameter('left', $child->getLeft())
            ->setParameter('right', $child->getRight())
            ->setParameter('level', $child->getLevel() - 1)
            ->getQuery()->getOneOrNullResult();
    }

    /**
     * Find All Parents.
     *
     * @param TreeInterface $child
     *
     * @return array
     */
    public function findParents(TreeInterface $child)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->lt('t.left', ':left'),
                $query->expr()->gt('t.right', ':right')
            )
        );

        return  $query
            ->setParameter('left', $child->getLeft())
            ->setParameter('right', $child->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find Root of the ITree.
     *
     * @return TreeInterface|null
     */
    public function findRoot()
    {
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->eq('t.left', 1)
        );

        return  $query->getQuery()->getOneOrNullResult();
    }
}
