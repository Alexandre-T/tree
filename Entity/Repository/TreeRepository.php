<?php

namespace Lex\TreeBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Lex\TreeBundle\Entity\ITree;

/**
 * TreeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TreeRepository extends EntityRepository
{
    /**
     * Find all Children
     *
     * @param string $code
     * @return ITree
     */
    public function findOneByCode($code){
        /** @var ITree $tree */
        $tree = $this->findOneBy(['code' => $code]);
        return $tree;
    }

    /**
     * Find all Children
     *
     * @param ITree $parent
     * @return array
     */
    public function findAllChildren(ITree $parent){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right')
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find direct Children
     *
     * @param ITree $parent
     * @return array
     */
    public function findChildren(ITree $parent){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right'),
                $query->expr()->eq('t.level', ':level')
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->setParameter('level', $parent->getLevel() + 1)
            ->getQuery()->getResult();
    }

    /**
     * Find complement
     *
     * @param ITree $element
     * @return array
     */
    public function findComplement(ITree $element){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->orX(
                $query->expr()->lt('t.left', ':left'),
                $query->expr()->gt('t.right', ':right')
            )
        );

        return  $query
            ->setParameter('left', $element->getLeft())
            ->setParameter('right', $element->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find leaves
     *
     * @param ITree $parent
     * @return array
     */
    public function findLeaves(ITree $parent = null){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        if (null === $parent){
            $query = $query->where(
                $query->expr()->eq('t.right - t.left', 1)
            );
            return $query->getQuery()->getResult();
        }

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right'),
                $query->expr()->eq('t.right - t.left', 1)
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find nodes
     *
     * @param ITree $parent
     * @return array
     */
    public function findNodes(ITree $parent = null){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        if (null === $parent){
            $query = $query->where(
                $query->expr()->gt('t.right - t.left', 1)
            );
            return $query->getQuery()->getResult();
        }

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->gt('t.left', ':left'),
                $query->expr()->lt('t.right', ':right'),
                $query->expr()->gt('t.right - t.left', 1)
            )
        );

        return  $query
            ->setParameter('left', $parent->getLeft())
            ->setParameter('right', $parent->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find direct Parent
     *
     * @param ITree $child
     * @return ITree|null
     */
    public function findParent(ITree $child){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->lt('t.left', ':left'),
                $query->expr()->gt('t.right', ':right'),
                $query->expr()->eq('t.level', ':level')
            )
        );

        return $query
            ->setParameter('left', $child->getLeft())
            ->setParameter('right', $child->getRight())
            ->setParameter('level', $child->getLevel() - 1)
            ->getQuery()->getOneOrNullResult();
    }

    /**
     * Find All Parents
     *
     * @param ITree $child
     * @return array
     */
    public function findParents(ITree $child){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->andX(
                $query->expr()->lt('t.left', ':left'),
                $query->expr()->gt('t.right', ':right')
            )
        );

        return  $query
            ->setParameter('left', $child->getLeft())
            ->setParameter('right', $child->getRight())
            ->getQuery()->getResult();
    }

    /**
     * Find Root of the ITree
     *
     * @return ITree|null
     */
    public function findRoot(){
        $query = $this->createQueryBuilder('t')
            ->select('t');

        $query = $query->where(
            $query->expr()->eq('t.left', 1)
        );

        return  $query->getQuery()->getOneOrNullResult();
    }
}
